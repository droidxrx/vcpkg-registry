diff --git a/imconfig.h b/imconfig.h
index ed265082d..5b07c3348 100644
--- a/imconfig.h
+++ b/imconfig.h
@@ -73,7 +73,9 @@
 //---- Use FreeType to build and rasterize the font atlas (instead of stb_truetype which is embedded by default in Dear ImGui)
 // Requires FreeType headers to be available in the include path. Requires program to be compiled with 'misc/freetype/imgui_freetype.cpp' (in this repository) + the FreeType library (not provided).
 // On Windows you may use vcpkg with 'vcpkg install freetype --triplet=x64-windows' + 'vcpkg integrate install'.
-//#define IMGUI_ENABLE_FREETYPE
+#ifdef IMGUI_ANDROID_USE_FREETYPE
+#define IMGUI_ENABLE_FREETYPE
+#endif
 
 //---- Use stb_truetype to build and rasterize the font atlas (default)
 // The only purpose of this define is if you want force compilation of the stb_truetype backend ALONG with the FreeType backend.
@@ -81,15 +83,11 @@
 
 //---- Define constructor and implicit cast operators to convert back<>forth between your math types and ImVec2/ImVec4.
 // This will be inlined as part of ImVec2 and ImVec4 class declarations.
-/*
-#define IM_VEC2_CLASS_EXTRA                                                     \
-        constexpr ImVec2(const MyVec2& f) : x(f.x), y(f.y) {}                   \
-        operator MyVec2() const { return MyVec2(x,y); }
+#define IM_VEC2_CLASS_EXTRA        \
+    void set(float x_, float y_) { x = x_; y = y_; }
 
-#define IM_VEC4_CLASS_EXTRA                                                     \
-        constexpr ImVec4(const MyVec4& f) : x(f.x), y(f.y), z(f.z), w(f.w) {}   \
-        operator MyVec4() const { return MyVec4(x,y,z,w); }
-*/
+#define IM_VEC4_CLASS_EXTRA                            \
+    void set(float x_, float y_, float z_, float w_) { x = x_; y = y_; z = z_; w = w_; }
 
 //---- Use 32-bit vertex indices (default is 16-bit) is one way to allow large meshes with more than 64K vertices.
 // Your renderer backend will need to support it (most example renderer backends support both 16/32-bit indices).
@@ -118,3 +116,46 @@ namespace ImGui
     void MyFunction(const char* name, const MyMatrix44& v);
 }
 */
+
+#ifndef IMGUI_DEFINE_MATH_OPERATORS
+#define IMGUI_DEFINE_MATH_OPERATORS
+#endif
+
+
+
+#define IM_RECT_CLASS_EXTRA                                         \
+    ImVec2 Center;                                                  \
+    void set(float left, float top, float right, float bottom) { Min.x = left; Min.y = top; Max.x = right; Max.y = bottom; Center.x = (left + right) * 0.5f; Center.y = (top + bottom) * 0.5f; } \
+    void set(const ImVec2 &min, const ImVec2 &max) { Min = min; Max = max; Center.x = (min.x + max.x) * 0.5f; Center.y = (min.y + max.y) * 0.5f; } \
+    void set() { Center.x = (Min.x + Max.x) * 0.5f; Center.y = (Min.y + Max.y) * 0.5f; } \
+    float GetCenterWidth() const { return (Min.x + Max.x) * 0.5f; } \
+    float GetCenterHeight() const { return (Min.y + Max.y) * 0.5f; }
+
+struct ImVec3 {
+    float x, y, z;
+    constexpr ImVec3() : x(0.0f), y(0.0f), z(0.0f) {}
+    constexpr ImVec3(float _x, float _y, float _z) : x(_x), y(_y), z(_z) {}
+    void set(float x_, float y_, float z_) { x = x_; y = y_; z = z_; }
+};
+
+#define IMGUI_DEFINE_MATH_EXTRA_OPERATORS \
+static inline ImVec2 operator+(const ImVec2& lhs, const float rhs)     { return {lhs.x + rhs, lhs.y + rhs}; } \
+static inline ImVec2 operator-(const ImVec2& lhs, const float rhs)     { return {lhs.x - rhs, lhs.y - rhs}; } \
+static inline ImVec2& operator+=(ImVec2& lhs, const float rhs)         { lhs.x += rhs; lhs.y += rhs; return lhs; } \
+static inline ImVec2& operator-=(ImVec2& lhs, const float rhs)         { lhs.x -= rhs; lhs.y -= rhs; return lhs; } \
+static inline ImVec3  operator*(const ImVec3 &lhs, const float rhs)    { return { lhs.x * rhs, lhs.y * rhs, lhs.z * rhs }; } \
+static inline ImVec3  operator/(const ImVec3 &lhs, const float rhs)    { return { lhs.x / rhs, lhs.y / rhs, lhs.z / rhs }; } \
+static inline ImVec3  operator+(const ImVec3 &lhs, const float rhs)    { return { lhs.x + rhs, lhs.y + rhs, lhs.z + rhs }; } \
+static inline ImVec3  operator+(const ImVec3 &lhs, const ImVec3 &rhs)  { return { lhs.x + rhs.x, lhs.y + rhs.y, lhs.z + rhs.z }; } \
+static inline ImVec3  operator-(const ImVec3 &lhs, const float rhs)    { return { lhs.x - rhs, lhs.y - rhs, lhs.z - rhs }; } \
+static inline ImVec3  operator-(const ImVec3 &lhs, const ImVec3 &rhs)  { return { lhs.x - rhs.x, lhs.y - rhs.y, lhs.z - rhs.z }; } \
+static inline ImVec3  operator*(const ImVec3 &lhs, const ImVec3 &rhs)  { return { lhs.x * rhs.x, lhs.y * rhs.y, lhs.z * rhs.z }; } \
+static inline ImVec3  operator/(const ImVec3 &lhs, const ImVec3 &rhs)  { return { lhs.x / rhs.x, lhs.y / rhs.y, lhs.z / rhs.z }; } \
+static inline ImVec3  &operator+=(ImVec3 &lhs, const float rhs)        { lhs.x += rhs; lhs.y += rhs; lhs.z += rhs; return lhs; } \
+static inline ImVec3  &operator-=(ImVec3 &lhs, const float rhs)        { lhs.x -= rhs; lhs.y -= rhs; lhs.z -= rhs; return lhs; } \
+static inline ImVec3  &operator*=(ImVec3 &lhs, const float rhs)        { lhs.x *= rhs; lhs.y *= rhs; lhs.z *= rhs; return lhs; } \
+static inline ImVec3  &operator/=(ImVec3 &lhs, const float rhs)        { lhs.x /= rhs; lhs.y /= rhs; lhs.z /= rhs; return lhs; } \
+static inline ImVec3  &operator+=(ImVec3 &lhs, const ImVec3 &rhs)      { lhs.x += rhs.x; lhs.y += rhs.y; lhs.z += rhs.z; return lhs; } \
+static inline ImVec3  &operator-=(ImVec3 &lhs, const ImVec3 &rhs)      { lhs.x -= rhs.x; lhs.y -= rhs.y; lhs.z -= rhs.z; return lhs; } \
+static inline ImVec3  &operator*=(ImVec3 &lhs, const ImVec3 &rhs)      { lhs.x *= rhs.x; lhs.y *= rhs.y; lhs.z *= rhs.z; return lhs; } \
+static inline ImVec3  &operator/=(ImVec3 &lhs, const ImVec3 &rhs)      { lhs.x /= rhs.x; lhs.y /= rhs.y; lhs.z /= rhs.z; return lhs; }
